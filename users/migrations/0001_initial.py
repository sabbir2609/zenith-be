# Generated by Django 5.0.7 on 2025-02-14 17:03

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, help_text="User's first name.", max_length=255)),
                ('last_name', models.CharField(blank=True, help_text="User's last name.", max_length=255)),
                ('username', models.CharField(blank=True, help_text='Username.', max_length=255, null=True, unique=True)),
                ('email', models.EmailField(db_index=True, help_text="User's email address.", max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the user is active.')),
                ('is_admin', models.BooleanField(default=False, help_text='Whether the user is an admin.')),
                ('is_phone_verified', models.BooleanField(default=False, help_text="Whether the user's phone number is verified.")),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Whether 2FA is enabled.')),
                ('last_password_reset', models.DateTimeField(blank=True, help_text='Timestamp of last password reset.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='User creation timestamp.')),
                ('last_login', models.DateTimeField(auto_now=True, help_text='Last login timestamp.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
